
#include <iostream>
#include <string>

using namespace std;

class Transport;
class Car;
class Carriage;
class Bicycle;

class Transport
{
	static int general_distance;
protected:
	int trip_price,transport_price,speed;
	string name;
public:
	//Transport() :cost(10), speed(10) {};
	Transport();
	void Get();
	void Set_Name();
	void Set_Speed();
	void Set_Trip_Price();
	void Set_Transport_Price();
	int Edit();
	int Count(int&);
	void Set_All() { Set_Name(); Set_Speed(); Set_Transport_Price(); Set_Trip_Price(); };
	static void SetDistance()
	{
		cout << "\nEnter distance of ALL transport - ";
		cin >> general_distance;
	}
	static int GetDistance() { return general_distance; }
};

int Transport::general_distance = 0;

class Car : public Transport
{
protected:
	string brand,color;
public:
	Car();
	void Get();
	void Edit();
	void Count(int*);
	void Set_All() { cout << "\nCar\n"; Transport::Set_All(); Set_Color(); Set_Brand(); }
	void Set_Color();
	void Set_Brand();
};

class Bicycle : public Transport
{
protected:
	int wheel_quantity, wheel_diameter;
public:
	Bicycle();
	void Get();
	void Edit();
	void Count(int*);
	void Set_All() { cout << "\nBicycle\n"; Transport::Set_All(); Set_Wheel_Quantity(); Set_Wheel_Diameter(); }
	void Set_Wheel_Quantity();
	void Set_Wheel_Diameter();
};

class Carriage :public Transport
{
protected:
	int horse_quantity;
	string horse_color;
public:
	Carriage();
	void Get();
	void Edit();
	void Count(int*);
	void Set_All() { cout << "\nCarriage\n";  Transport::Set_All(); Set_Horse_Quantity(); Set_Horse_Color(); }
	void Set_Horse_Quantity();
	void Set_Horse_Color();
};

int Check(int, int, int);
void Search(int*);


int main()
{
	Car car;
	Carriage carriage;
	Bicycle bicycle;

	int code;
	while (true)
	{
		cout << "\n\nWhat do you want to do?\n1 - Fill all\n2 - Edit\n3 - View\n4 - Count\n5 - Exit\n\n";
		cin >> code;
		code = Check(code, 1, 5);
		switch (code)
		{
		case 1:
		{
			car.Set_All();
			bicycle.Set_All();
			carriage.Set_All();
			break;
		}
		case 2:
		{
			int code1;
			cout << "\nWhat object do you want to change&\n1 - Car\n2 - Bicycle\n3 - Carriage\n\n";
			cin >> code1;
			code1 = Check(code1, 1, 3);
			switch (code1)
			{
			case 1:
				car.Edit();
				break;
			case 2:
				bicycle.Edit();
				break;
			case 3:
				carriage.Edit();
				break;
			}
			break;
		}
		case 3:
			car.Get();
			carriage.Get();
			bicycle.Get();
			break;
		case 4:
		{
			int arr[6];
			Transport::SetDistance();
			car.Count(arr);
			bicycle.Count(arr);
			carriage.Count(arr);
			for (int i = 0; i < 6; ++i)
				cout << arr[i] << endl;
			Search(arr);
			break;
		}
		case 5:
			return 0;
		}

	}

	return 0;
}



Transport::Transport()
{
	cout << "\nConstructor worked for transport - " << this;
	this->name = "N/A";
	this->speed = 10;
	this->transport_price = 0;
	this->trip_price = 0;
}

void Transport::Get()
{
	cout << "\nObject - " << this << "\nName - " << name << "\nSpeed - " << speed << "\nTrip price - " << trip_price << "\nTransport price - " << transport_price;
	return;
}

void Transport::Set_Name()
{
	cout << "\nEnter name of transport - ";
	cin >> this->name;
}

void Transport::Set_Speed()
{
	cout << "\nEnter speed of transport - ";
	cin >> this->speed;
	this->speed = Check(this->speed, 1, 300);
}

void Transport::Set_Trip_Price()
{
	cout << "\nEnter trip price of transport - ";
	cin >> this->trip_price;
	this->trip_price = Check(this->trip_price, 0, 10000);
}

void Transport::Set_Transport_Price()
{
	cout << "\nEnter price of transport - ";
	cin >> this->transport_price;
	this->transport_price = Check(this->transport_price, 0, 10000);
}

int Transport::Edit()
{
	int code;
	cout << "\n3 - Name\n4 - Transport Price\n5 - Speed\n6 - Trip Price\n";
	cin >> code;
	code = Check(code, 1, 6);
	switch (code)
	{
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		this->Set_Name();
		break;
	case 4:
		this->Set_Transport_Price();
		break;
	case 5:
		this->Set_Speed();
		break;
	case 6:
		this->Set_Trip_Price();
		break;
	}
	return 0;
}

int Transport::Count(int& total_time)
{
	int dist = Transport::GetDistance();
	if (!speed)
	{
		cout << "\nSpeed = 0\nPlease enter speed of transport\n";
		this->Set_Speed();
	}
	total_time = dist / speed;
	int total_price = transport_price + dist * trip_price;
	return total_price;
}




Car::Car():Transport()
{
	cout << "\nConstructor worked for car - " << this;
	this->brand = "N/A";
	this->color = "N/A";
}

void Car::Edit()
{
	cout << "\nWhat do u want to change?\n1 - Color\n2 - Brand";
	int code = Transport::Edit();
	if (code == 1)
		this->Set_Color();
	else if(code==2)
		this->Set_Brand();
}

void Car::Get()
{
	cout << "\nCar\n";
	Transport::Get();
	cout << "\nColor - " << color << "\nBrand - " << brand<<endl;
}

void Car::Count(int* arr)
{
	int time = 0;
	int price = Transport::Count(time);
	arr[0] = price;
	arr[1] = time;
	cout << "\nCar\nPrice - " << price << "\nTime - " << time << endl;
}

void Car::Set_Color()
{
	cout << "\nEnter color - ";
	cin >> this->color;
}

void Car::Set_Brand()
{
	cout << "\nEnter brand - ";
	cin >> this->brand;
}




Bicycle::Bicycle() :Transport()
{
	cout << "\nConstructor worked for bicycle - " << this;
	//this->Set_Wheel_Quantity();
	//this->Set_Wheel_Diameter();
	this->wheel_diameter = 0;
	this->wheel_quantity = 0;
}

void Bicycle::Edit()
{
	cout << "\nWhat do u want to change?\n1 - Wheel quantity\n2 - Wheel diameter";
	int code = Transport::Edit();
	if (code == 1)
		this->Set_Wheel_Quantity();
	else if (code == 2)
		this->Set_Wheel_Diameter();
}

void Bicycle::Get()
{
	cout << "\nBicycle\n";
	Transport::Get();
	cout << "\nWheel quantity - " << wheel_quantity << "\nWheel diameter - " << wheel_diameter<<endl;
}

void Bicycle::Count(int* arr)
{
	int time = 0;
	int price = Transport::Count(time);
	if (!wheel_quantity)
		this->Set_Wheel_Quantity();
	price += (12 / wheel_quantity);
	arr[2] = price;
	arr[3] = time;
	cout << "\nBicycle\nPrice - " << price << "\nTime - " << time << endl;
}

void Bicycle::Set_Wheel_Quantity()
{
	cout << "\nEnter wheel quantity - ";
	cin >> this->wheel_quantity;
	this->wheel_quantity = Check(this->wheel_quantity, 1, 5);
}

void Bicycle::Set_Wheel_Diameter()
{
	cout << "\nEnter wheel_diameter(cm) - ";
	cin >> this->wheel_diameter;
	this->wheel_diameter = Check(this->wheel_diameter, 1, 100);
}




Carriage::Carriage() :Transport()
{
	cout << "\nConstructor worked for carriage - " << this;
	this->horse_quantity = 0;
	this->horse_color = "N/A";
	//this->Set_Horse_Quantity();
	//this->Set_Horse_Color();
}

void Carriage::Edit()
{
	cout << "\nWhat do u want to change?\n1 - Horse color\n2 - Horse quantity";
	int code = Transport::Edit();
	if (code == 1)
		this->Set_Horse_Color();
	else if (code == 2)
		this->Set_Horse_Quantity();
}

void Carriage::Get()
{
	cout << "\nCarriage\n";
	Transport::Get();
	cout << "\nHorse_quantity - " << horse_quantity << "\nHorse color - " << horse_quantity << endl;
}

void Carriage::Count(int* arr)
{
	int time = 0;
	int price = Transport::Count(time);
	if (!horse_quantity)
		this->Set_Horse_Quantity();
	price += (60 / horse_quantity);
	arr[4] = price;
	arr[5] = time;
	cout << "\nCarriage\nPrice - " << price << "\nTime - " << time << endl;
}

void Carriage::Set_Horse_Color()
{
	cout << "\nEnter horse color - ";
	cin >> this->horse_color;
}

void Carriage::Set_Horse_Quantity()
{
	cout << "\nEnter horse_quantity - ";
	cin >> this->horse_quantity;
	this->horse_quantity = Check(this->horse_quantity, 1, 12);
}


int Check(int value, int min, int max)
{
	while (cin.fail() || value < min || value> max)
	{
		cout << "\nTry again\n";
		cin.clear();
		cin.ignore(500, '\n');
		cin >> value;
	}
	cin.ignore(500, '\n');
	return value;
}

void Search(int* arr)
{
	int min_price = arr[0], min_time = arr[1], min_i = 0, min_j = 1;
	for (int i = 2, j = 3; i < 6; i += 2,j+=2)
	{
		if (arr[i] < min_price)
		{
			min_price = arr[i] ;
			min_i = i;
		}
		if (arr[j] < min_time)
		{
			min_time = arr[j];
			min_j = j;
		}
	}

	cout << "\nmin price = " << min_price;
	if (!min_i)
		cout << " (Car)";
	else if (min_i == 2)
		cout << " (Bicycle)";
	else
		cout << " (Carriage)";

	cout << "\nmin time = " << min_time;
	if (min_j==1)
		cout << " (Car)\n";
	else if (min_j == 3)
		cout << " (Bicycle)\n";
	else
		cout << " (Carriage)\n"; 
}
